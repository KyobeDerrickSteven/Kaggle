{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "52218195",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:02.610751Z",
     "iopub.status.busy": "2025-01-21T16:38:02.610385Z",
     "iopub.status.idle": "2025-01-21T16:38:05.254695Z",
     "shell.execute_reply": "2025-01-21T16:38:05.253579Z"
    },
    "papermill": {
     "duration": 2.651265,
     "end_time": "2025-01-21T16:38:05.256228",
     "exception": false,
     "start_time": "2025-01-21T16:38:02.604963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/apple-sales-dataset-2024/apple_sales_2024.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af5014c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.264889Z",
     "iopub.status.busy": "2025-01-21T16:38:05.264392Z",
     "iopub.status.idle": "2025-01-21T16:38:05.303622Z",
     "shell.execute_reply": "2025-01-21T16:38:05.302528Z"
    },
    "papermill": {
     "duration": 0.04528,
     "end_time": "2025-01-21T16:38:05.305345",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.260065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Region</th>\n",
       "      <th>iPhone Sales (in million units)</th>\n",
       "      <th>iPad Sales (in million units)</th>\n",
       "      <th>Mac Sales (in million units)</th>\n",
       "      <th>Wearables (in million units)</th>\n",
       "      <th>Services Revenue (in billion $)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Greater China</td>\n",
       "      <td>7.46</td>\n",
       "      <td>6.75</td>\n",
       "      <td>1.19</td>\n",
       "      <td>5.88</td>\n",
       "      <td>15.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Germany</td>\n",
       "      <td>Europe</td>\n",
       "      <td>8.63</td>\n",
       "      <td>14.06</td>\n",
       "      <td>7.03</td>\n",
       "      <td>7.42</td>\n",
       "      <td>10.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>UK</td>\n",
       "      <td>Europe</td>\n",
       "      <td>5.61</td>\n",
       "      <td>14.09</td>\n",
       "      <td>8.78</td>\n",
       "      <td>8.19</td>\n",
       "      <td>19.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Shanghai</td>\n",
       "      <td>Greater China</td>\n",
       "      <td>7.82</td>\n",
       "      <td>7.97</td>\n",
       "      <td>9.78</td>\n",
       "      <td>2.28</td>\n",
       "      <td>6.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Thailand</td>\n",
       "      <td>Rest of Asia</td>\n",
       "      <td>16.70</td>\n",
       "      <td>8.13</td>\n",
       "      <td>6.46</td>\n",
       "      <td>3.48</td>\n",
       "      <td>13.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       State         Region  iPhone Sales (in million units)  \\\n",
       "0  Chongqing  Greater China                             7.46   \n",
       "1    Germany         Europe                             8.63   \n",
       "2         UK         Europe                             5.61   \n",
       "3   Shanghai  Greater China                             7.82   \n",
       "4   Thailand   Rest of Asia                            16.70   \n",
       "\n",
       "   iPad Sales (in million units)  Mac Sales (in million units)  \\\n",
       "0                           6.75                          1.19   \n",
       "1                          14.06                          7.03   \n",
       "2                          14.09                          8.78   \n",
       "3                           7.97                          9.78   \n",
       "4                           8.13                          6.46   \n",
       "\n",
       "   Wearables (in million units)  Services Revenue (in billion $)  \n",
       "0                          5.88                            15.88  \n",
       "1                          7.42                            10.12  \n",
       "2                          8.19                            19.85  \n",
       "3                          2.28                             6.16  \n",
       "4                          3.48                            13.29  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/apple-sales-dataset-2024/apple_sales_2024.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "55e4fb11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.314526Z",
     "iopub.status.busy": "2025-01-21T16:38:05.314157Z",
     "iopub.status.idle": "2025-01-21T16:38:05.327920Z",
     "shell.execute_reply": "2025-01-21T16:38:05.326898Z"
    },
    "papermill": {
     "duration": 0.020104,
     "end_time": "2025-01-21T16:38:05.329586",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.309482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Region</th>\n",
       "      <th>iphone_sales</th>\n",
       "      <th>ipad_sales</th>\n",
       "      <th>Mac_sales</th>\n",
       "      <th>Wearables_sales</th>\n",
       "      <th>Service_Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Greater China</td>\n",
       "      <td>7.46</td>\n",
       "      <td>6.75</td>\n",
       "      <td>1.19</td>\n",
       "      <td>5.88</td>\n",
       "      <td>15.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Germany</td>\n",
       "      <td>Europe</td>\n",
       "      <td>8.63</td>\n",
       "      <td>14.06</td>\n",
       "      <td>7.03</td>\n",
       "      <td>7.42</td>\n",
       "      <td>10.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>UK</td>\n",
       "      <td>Europe</td>\n",
       "      <td>5.61</td>\n",
       "      <td>14.09</td>\n",
       "      <td>8.78</td>\n",
       "      <td>8.19</td>\n",
       "      <td>19.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Shanghai</td>\n",
       "      <td>Greater China</td>\n",
       "      <td>7.82</td>\n",
       "      <td>7.97</td>\n",
       "      <td>9.78</td>\n",
       "      <td>2.28</td>\n",
       "      <td>6.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Thailand</td>\n",
       "      <td>Rest of Asia</td>\n",
       "      <td>16.70</td>\n",
       "      <td>8.13</td>\n",
       "      <td>6.46</td>\n",
       "      <td>3.48</td>\n",
       "      <td>13.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       State         Region  iphone_sales  ipad_sales  Mac_sales  \\\n",
       "0  Chongqing  Greater China          7.46        6.75       1.19   \n",
       "1    Germany         Europe          8.63       14.06       7.03   \n",
       "2         UK         Europe          5.61       14.09       8.78   \n",
       "3   Shanghai  Greater China          7.82        7.97       9.78   \n",
       "4   Thailand   Rest of Asia         16.70        8.13       6.46   \n",
       "\n",
       "   Wearables_sales  Service_Revenue  \n",
       "0             5.88            15.88  \n",
       "1             7.42            10.12  \n",
       "2             8.19            19.85  \n",
       "3             2.28             6.16  \n",
       "4             3.48            13.29  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={'iPhone Sales (in million units)': 'iphone_sales',\n",
    "                  'iPad Sales (in million units)': 'ipad_sales',\n",
    "                  'Mac Sales (in million units)':'Mac_sales',\n",
    "                  'Wearables (in million units)': 'Wearables_sales',\n",
    "                  'Services Revenue (in billion $)': 'Service_Revenue'}, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5012a143",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.339266Z",
     "iopub.status.busy": "2025-01-21T16:38:05.338913Z",
     "iopub.status.idle": "2025-01-21T16:38:05.351268Z",
     "shell.execute_reply": "2025-01-21T16:38:05.350205Z"
    },
    "papermill": {
     "duration": 0.018872,
     "end_time": "2025-01-21T16:38:05.352917",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.334045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State               25\n",
       "Region               5\n",
       "iphone_sales       824\n",
       "ipad_sales         692\n",
       "Mac_sales          595\n",
       "Wearables_sales    639\n",
       "Service_Revenue    741\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b93ae8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.362618Z",
     "iopub.status.busy": "2025-01-21T16:38:05.362264Z",
     "iopub.status.idle": "2025-01-21T16:38:05.369458Z",
     "shell.execute_reply": "2025-01-21T16:38:05.368300Z"
    },
    "papermill": {
     "duration": 0.013823,
     "end_time": "2025-01-21T16:38:05.371073",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.357250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State              0\n",
      "Region             0\n",
      "iphone_sales       0\n",
      "ipad_sales         0\n",
      "Mac_sales          0\n",
      "Wearables_sales    0\n",
      "Service_Revenue    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09f181b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.380808Z",
     "iopub.status.busy": "2025-01-21T16:38:05.380495Z",
     "iopub.status.idle": "2025-01-21T16:38:05.404894Z",
     "shell.execute_reply": "2025-01-21T16:38:05.403848Z"
    },
    "papermill": {
     "duration": 0.031202,
     "end_time": "2025-01-21T16:38:05.406650",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.375448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Region</th>\n",
       "      <th>Service_Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Europe</td>\n",
       "      <td>2416.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Greater China</td>\n",
       "      <td>2780.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>North America</td>\n",
       "      <td>2281.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rest of Asia</td>\n",
       "      <td>2267.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rest of World</td>\n",
       "      <td>2701.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Region  Service_Revenue\n",
       "0         Europe          2416.30\n",
       "1  Greater China          2780.72\n",
       "2  North America          2281.21\n",
       "3   Rest of Asia          2267.15\n",
       "4  Rest of World          2701.75"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df.groupby('Region')['Service_Revenue'].sum().reset_index()\n",
    "# df2.drop('State')\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "992e6d0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.416578Z",
     "iopub.status.busy": "2025-01-21T16:38:05.416229Z",
     "iopub.status.idle": "2025-01-21T16:38:05.728028Z",
     "shell.execute_reply": "2025-01-21T16:38:05.727019Z"
    },
    "papermill": {
     "duration": 0.318588,
     "end_time": "2025-01-21T16:38:05.729720",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.411132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(14, 8))\n",
    "sns.barplot(data=df2,x='Region',y='Service_Revenue',palette='magma')\n",
    "ax.set_title('Service Revenue by Region')\n",
    "ax.set_xlabel('Region')\n",
    "ax.set_ylabel('Service Revenue')\n",
    "plt.xticks()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0d07b177",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.741021Z",
     "iopub.status.busy": "2025-01-21T16:38:05.740641Z",
     "iopub.status.idle": "2025-01-21T16:38:05.975988Z",
     "shell.execute_reply": "2025-01-21T16:38:05.974852Z"
    },
    "papermill": {
     "duration": 0.242936,
     "end_time": "2025-01-21T16:38:05.977762",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.734826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df3 = df.groupby('Region')['iphone_sales'].sum().reset_index()\n",
    "fig, ax = plt.subplots(figsize=(14, 8))\n",
    "sns.barplot(data=df3,x='Region',y='iphone_sales',palette='rocket')\n",
    "ax.set_title('Iphone Sales by Region')\n",
    "ax.set_xlabel('Region')\n",
    "ax.set_ylabel('Iphone Sales Revenue')\n",
    "plt.xticks()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "05915775",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:05.990251Z",
     "iopub.status.busy": "2025-01-21T16:38:05.989849Z",
     "iopub.status.idle": "2025-01-21T16:38:06.187911Z",
     "shell.execute_reply": "2025-01-21T16:38:06.186782Z"
    },
    "papermill": {
     "duration": 0.206224,
     "end_time": "2025-01-21T16:38:06.189684",
     "exception": false,
     "start_time": "2025-01-21T16:38:05.983460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column: State\n",
      "0 -> Australia\n",
      "1 -> Beijing\n",
      "2 -> Brazil\n",
      "3 -> California\n",
      "4 -> Canada\n",
      "5 -> Chongqing\n",
      "6 -> Florida\n",
      "7 -> France\n",
      "8 -> Germany\n",
      "9 -> Hong Kong\n",
      "10 -> Illinois\n",
      "11 -> India\n",
      "12 -> Indonesia\n",
      "13 -> Italy\n",
      "14 -> Japan\n",
      "15 -> Mexico\n",
      "16 -> New York\n",
      "17 -> Shanghai\n",
      "18 -> Shenzhen\n",
      "19 -> South Africa\n",
      "20 -> South Korea\n",
      "21 -> Spain\n",
      "22 -> Texas\n",
      "23 -> Thailand\n",
      "24 -> UK\n",
      "\n",
      "Column: Region\n",
      "0 -> Europe\n",
      "1 -> Greater China\n",
      "2 -> North America\n",
      "3 -> Rest of Asia\n",
      "4 -> Rest of World\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "encoder = LabelEncoder()\n",
    "\n",
    "label_mappings = {}\n",
    "\n",
    "for col in df.select_dtypes('object'):\n",
    "    df[col] = encoder.fit_transform(df[col])\n",
    "    label_mappings[col] = dict(zip(encoder.classes_, encoder.transform(encoder.classes_)))\n",
    "\n",
    "for col, mapping in label_mappings.items():\n",
    "    print(f\"Column: {col}\")\n",
    "    for label, code in mapping.items():\n",
    "        print(f\"{code} -> {label}\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b4e1a959",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:06.202381Z",
     "iopub.status.busy": "2025-01-21T16:38:06.202004Z",
     "iopub.status.idle": "2025-01-21T16:38:06.214421Z",
     "shell.execute_reply": "2025-01-21T16:38:06.213421Z"
    },
    "papermill": {
     "duration": 0.020398,
     "end_time": "2025-01-21T16:38:06.215901",
     "exception": false,
     "start_time": "2025-01-21T16:38:06.195503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Region</th>\n",
       "      <th>iphone_sales</th>\n",
       "      <th>ipad_sales</th>\n",
       "      <th>Mac_sales</th>\n",
       "      <th>Wearables_sales</th>\n",
       "      <th>Service_Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>7.46</td>\n",
       "      <td>6.75</td>\n",
       "      <td>1.19</td>\n",
       "      <td>5.88</td>\n",
       "      <td>15.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8.63</td>\n",
       "      <td>14.06</td>\n",
       "      <td>7.03</td>\n",
       "      <td>7.42</td>\n",
       "      <td>10.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>5.61</td>\n",
       "      <td>14.09</td>\n",
       "      <td>8.78</td>\n",
       "      <td>8.19</td>\n",
       "      <td>19.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>7.82</td>\n",
       "      <td>7.97</td>\n",
       "      <td>9.78</td>\n",
       "      <td>2.28</td>\n",
       "      <td>6.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>23</td>\n",
       "      <td>3</td>\n",
       "      <td>16.70</td>\n",
       "      <td>8.13</td>\n",
       "      <td>6.46</td>\n",
       "      <td>3.48</td>\n",
       "      <td>13.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   State  Region  iphone_sales  ipad_sales  Mac_sales  Wearables_sales  \\\n",
       "0      5       1          7.46        6.75       1.19             5.88   \n",
       "1      8       0          8.63       14.06       7.03             7.42   \n",
       "2     24       0          5.61       14.09       8.78             8.19   \n",
       "3     17       1          7.82        7.97       9.78             2.28   \n",
       "4     23       3         16.70        8.13       6.46             3.48   \n",
       "\n",
       "   Service_Revenue  \n",
       "0            15.88  \n",
       "1            10.12  \n",
       "2            19.85  \n",
       "3             6.16  \n",
       "4            13.29  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3487d121",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:06.228715Z",
     "iopub.status.busy": "2025-01-21T16:38:06.228395Z",
     "iopub.status.idle": "2025-01-21T16:38:06.380727Z",
     "shell.execute_reply": "2025-01-21T16:38:06.379911Z"
    },
    "papermill": {
     "duration": 0.160811,
     "end_time": "2025-01-21T16:38:06.382527",
     "exception": false,
     "start_time": "2025-01-21T16:38:06.221716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import mean_squared_error\n",
    "X = df.drop('Service_Revenue', axis = 1)\n",
    "y = df['Service_Revenue']\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "48917d2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:06.396795Z",
     "iopub.status.busy": "2025-01-21T16:38:06.396478Z",
     "iopub.status.idle": "2025-01-21T16:38:06.662095Z",
     "shell.execute_reply": "2025-01-21T16:38:06.661129Z"
    },
    "papermill": {
     "duration": 0.275417,
     "end_time": "2025-01-21T16:38:06.663959",
     "exception": false,
     "start_time": "2025-01-21T16:38:06.388542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor\n",
    "\n",
    "params = {\n",
    "    'n_estimators': [200, 500, 1000],\n",
    "    'max_depth': [4, 8, 12],\n",
    "    'learning_rate': [0.01, 0.05, 0.1],\n",
    "    'scoring': 'reg:squarederror'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3aac6897",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:06.677247Z",
     "iopub.status.busy": "2025-01-21T16:38:06.676859Z",
     "iopub.status.idle": "2025-01-21T16:38:06.838162Z",
     "shell.execute_reply": "2025-01-21T16:38:06.835823Z"
    },
    "papermill": {
     "duration": 0.171082,
     "end_time": "2025-01-21T16:38:06.841226",
     "exception": false,
     "start_time": "2025-01-21T16:38:06.670144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean squared error is  24.287649869324895\n",
      "CPU times: user 485 ms, sys: 20.4 ms, total: 505 ms\n",
      "Wall time: 155 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "XG_model = XGBRegressor()\n",
    "#model = GridSearchCV(XG_model, params, cv=5, scoring='r2')\n",
    "XG_model.fit(X_train, y_train)\n",
    "y_pred = XG_model.predict(X_val)\n",
    "\n",
    "error = mean_squared_error(y_val, y_pred)\n",
    "print('mean squared error is ', error)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "45752461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-21T16:38:06.861162Z",
     "iopub.status.busy": "2025-01-21T16:38:06.860790Z",
     "iopub.status.idle": "2025-01-21T16:38:07.021402Z",
     "shell.execute_reply": "2025-01-21T16:38:07.020123Z"
    },
    "papermill": {
     "duration": 0.170573,
     "end_time": "2025-01-21T16:38:07.023224",
     "exception": false,
     "start_time": "2025-01-21T16:38:06.852651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean squared error is  18.7314659261038\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "linear_model = LinearRegression()\n",
    "linear_model.fit(X_train, y_train)\n",
    "y_pred_linear = linear_model.predict(X_val)\n",
    "\n",
    "Linear_error = mean_squared_error(y_val, y_pred_linear)\n",
    "print('mean squared error is ', Linear_error)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6513706,
     "sourceId": 10524560,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.015546,
   "end_time": "2025-01-21T16:38:07.848977",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-21T16:37:59.833431",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
